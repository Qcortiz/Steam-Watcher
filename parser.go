package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type DLC struct {
	AppID int
	Title string
	Price string
}

type Game struct {
	Title string
	AppID int
	Price string
	Link  string
	DLCs  []DLC
}

type AppDetails struct {
	Name          string `json:"name"`
	IsFree        bool   `json:"is_free"`
	DLC           []int  `json:"dlc"`
	PriceOverview struct {
		FinalFormatted string `json:"final_formatted"`
	} `json:"price_overview"`
}

// üîç –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É + DLC –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
func GetSteamGameWithDLCs(name string) (Game, error) {
	var result Game

	// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	game, err := searchGame(name)
	if err != nil {
		return result, err
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã
	details, err := getAppDetails(game.AppID)
	if err != nil {
		return result, err
	}

	result.Title = game.Title
	result.AppID = game.AppID
	result.Link = game.Link

	// üí• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ
	if !details.IsFree && details.PriceOverview.FinalFormatted == "" {
		return result, fmt.Errorf("–∏–≥—Ä–∞ \"%s\" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ", result.Title)
	}

	// ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
	if details.IsFree {
		result.Price = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
	} else {
		result.Price = details.PriceOverview.FinalFormatted
	}

	// üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ DLC
	for _, dlcID := range details.DLC {
		time.Sleep(200 * time.Millisecond) // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ API

		dlcDetails, err := getAppDetails(dlcID)
		if err != nil {
			// –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ DLC ‚Äî —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if strings.Contains(err.Error(), "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞") {
				log.Printf("‚ö†Ô∏è DLC %d –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–≥–∏–æ–Ω–µ, –ø—Ä–æ–ø—É—â–µ–Ω–æ", dlcID)
				continue
			}
			// –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏
			return result, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ DLC %d: %v", dlcID, err)
		}

		// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã DLC
		price := "–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
		if dlcDetails.IsFree {
			price = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
		} else if dlcDetails.PriceOverview.FinalFormatted != "" {
			price = dlcDetails.PriceOverview.FinalFormatted
		}

		result.DLCs = append(result.DLCs, DLC{
			AppID: dlcID,
			Title: dlcDetails.Name,
			Price: price,
		})
	}

	return result, nil
}

// üîé –ü–æ–∏—Å–∫ appid –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
func searchGame(name string) (Game, error) {
	var result Game
	baseURL := "https://store.steampowered.com/api/storesearch"
	u, _ := url.Parse(baseURL)
	q := u.Query()
	q.Set("term", name)
	q.Set("cc", "ru")
	q.Set("l", "russian")
	u.RawQuery = q.Encode()

	resp, err := http.Get(u.String())
	if err != nil {
		return result, err
	}
	defer resp.Body.Close()

	var data struct {
		Items []struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"items"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return result, err
	}
	if len(data.Items) == 0 {
		return result, fmt.Errorf("–∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	result.AppID = data.Items[0].ID
	result.Title = data.Items[0].Name
	result.Link = fmt.Sprintf("https://store.steampowered.com/app/%d", result.AppID)
	return result, nil
}

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ –∏–ª–∏ DLC –ø–æ appid
func getAppDetails(appid int) (AppDetails, error) {
	var result AppDetails
	url := fmt.Sprintf("https://store.steampowered.com/api/appdetails?appids=%d&cc=ru&l=russian", appid)

	resp, err := http.Get(url)
	if err != nil {
		return result, err
	}
	defer resp.Body.Close()

	var data map[string]struct {
		Success bool       `json:"success"`
		Data    AppDetails `json:"data"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return result, err
	}

	entry, ok := data[fmt.Sprintf("%d", appid)]
	if !ok || !entry.Success {
		return result, fmt.Errorf("–∏–≥—Ä–∞ –∏–ª–∏ DLC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
	}

	return entry.Data, nil
}
